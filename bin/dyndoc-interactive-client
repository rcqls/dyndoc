#!/usr/bin/env ruby
require 'rubygems'
require 'cmdparse'
require 'dyndocEM/dyndoc-interactive-client'
require 'dyndoc/common/utils' 
require "dyndoc/common/init"
require 'securerandom'
require 'clipboard'

Encoding.default_external = Encoding::UTF_8 if RUBY_VERSION > '1.8.7'

cmd = CmdParse::CommandParser.new( true )
cmd.program_name = "dyndoc-client"
cmd.program_version = [1, 5, 0]

$cfg_dyn={
  :client_cmd_opts=>{} ## to communicate first with the server! 
}

# user input dyn variable does not start with "--" and contains "=".
# args=ARGV.select{|name|
#   if(name[0,2]!="--" and name.include? "=") 
#     key,*val=name.split("=")
#     val=val.join("=")
#     $cfg_dyn[:user_input] << [key,val] 
#     false
#   else
#     true
#   end
# }

# args,$cfg_dyn[:cmd_pandoc_options]=args[0...(args.index "--pandoc")],args[((args.index "--pandoc")+1)..-1] if args.include? "--pandoc"
# unless (args & PANDOC_CMDS).empty? 
#   $cfg_dyn[:cmd_pandoc_options] = args & PANDOC_CMDS
#   args -= $cfg_dyn[:cmd_pandoc_options]
# end

args=ARGV

#p $cfg_dyn[:cmd_pandoc_options]

## secret file
new_secret_file=true

## read in config file!
cfgfiles=[]
cfgfiles << "/etc/dynrc" if File.exists? "/etc/dynrc"
cfgfiles << File.expand_path("~/.dynrc") if File.exists? File.expand_path("~/.dynrc")
cfgfiles << ".dynrc" if File.exists? ".dynrc"
if cfgfiles.empty?
  cfgfiles << :inside
end

cmd.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.separator "Global options:"

  opt.on('-v','--version VERSION',"dyndoc version to call (special: V3TTM, V3ODT)") {|v| $cfg_dyn[:version]=v}
  opt.on("--verbose", "Be verbose when outputting info") {|t| $cfg_dyn[:verbose] = true }
  opt.on("--debug", "debug mode") {|t| $cfg_dyn[:debug] = true }
  opt.on("-N","--nb-char-error-mode NBCHAR","Number of char in Error mode") {|t| $cfg_dyn[:nbChar_error]=t.to_i}
  opt.on('-b',"--backup", "backup mode") {|t| $cfg_dyn[:backup] = true }
  opt.on('-x',"--raw","raw mode, i.e. no model") {|t| $cfg_dyn[:raw_mode]=true;$cfg_dyn[:model_tmpl]=nil }
=begin
  opt.on('-o',"--output OUTPUT","output format tex(default),txt,txtl,html,c") {|o| $cfg_dyn[:output]=o.to_sym}
=end
  opt.on('--test','Use local package for development purposes') {
    $:.unshift(File.join(ENV["HOME"],"static","dyndoc-ruby","lib"))
    require 'pry'
    p $:
  }
  opt.on('-m', '--model MODEL','model (Experimental)') {|m| 
    m=nil if m.downcase.strip=="no"
    $cfg_dyn[:model_tmpl] =m
  }
  opt.on('-f','--pre TMPL',Array,'template to preload') {|t| $cfg_dyn[:pre_tmpl] += t}
  opt.on('-l','--post TMPL',Array,'template to postload') {|t| $cfg_dyn[:post_tmpl] += t}
  opt.on('-o','--out_tags TAGS',Array,'filter tags') {|t| $cfg_dyn[:out_tag] += t}
  opt.on('-p','--part_tags TAGS',Array,'filter tags') {|t| $cfg_dyn[:part_tag] += t}
  opt.on('-t','--tags TAGS',Array,'filter tags') {|t| $cfg_dyn[:tag_tmpl] += t}
  opt.on('-k','--keys KEYS',Array,'filter keys') {|t| $cfg_dyn[:keys_tmpl] += t}
  opt.on('-R',"--remote","remote mode") {|t| $cfg_dyn[:dyndoc_mode]=:remote_server}
=begin
  opt.on('-a',"--append EXTENSION","extension to append to the basename (ex: _corr)") {|a| $curDyn[:append]=a}
=end
  opt.on( '-r', '--root DIR', 'Prepend this document root' ) {|dir|
    $cfg_dyn[:rootDoc]=dir
  }

  opt.on('-i','--interactive','interactive mode') { $cfg_dyn[:dyndoc_session] = :interactive}
  
  opt.on( '--doc', 'launch doc pdf file' ) {
    #$curDyn.init
    #system "#{$curDyn[:pdfviewer]} #{File.join(CqlsDoc.sysRootDoc,'root_utf-8','Doc',$curDyn[:docfile])}&"
}
  opt.on('--viewer VIEWER','launch viewer (no=without) ') {|view| $cfg_dyn[:pdfviewer]=$cfg_dyn[:pngviewer]=view}
  opt.on('--enc ENCODINGS','encodings utf-8 (default) or iso-8859-1') {|enc| $cfg_dyn[:enc]=enc}
  opt.on('-K',"--keep-secret","keep dropbox secret file") {|t| new_secret_file=false}
end

cmd.add_command( CmdParse::HelpCommand.new )
cmd.add_command( CmdParse::VersionCommand.new )

# all
all = CmdParse::Command.new( 'all', false )
all.short_desc = "Parse all files"
all.options = CmdParse::OptionParserWrapper.new do |opt|
  opt.on( '-d', '--docs DOCS','Array', 'document list' ) {|t| 
    $cfg_dyn[:doc_list] += t.split(",").map{|e| e.strip}
  }
  opt.on('-c', '--cmd COMMAND','[s(ave)][b(ackup)][c(at)][pdf|png][v(iew)] and x=sv') {|c|
    $cfg_dyn[:cmd] =[]
    $cfg_dyn[:cmd] << :save if c.include? "s"
    $cfg_dyn[:cmd] << :backup if c.include? "b"
    $cfg_dyn[:cmd] << :cat if c.include? "c"
    $cfg_dyn[:cmd] << :pdf if c.include? "pdf"
    $cfg_dyn[:cmd] << :png if c.include? "png"
    $cfg_dyn[:cmd] << :view if c.include? "v"
    $cfg_dyn[:cmd] << :save << :view if c.include? "x"
    $cfg_dyn[:cmd] = [ :save, :pdf ] if $cfg_dyn[:cmd].empty? 
  }
  opt.on('-t','--test','Useful for testing (equivalent to -mno all -cc') {
    $cfg_dyn[:cmd] =[:cat]
    $cfg_dyn[:model_tmpl]=nil
  }
  opt.on( '-o', '--output_dir ', 'output directory' ) {|t| $cfg_dyn[:dirname_docs] = t}
  opt.on( '-p', '--project FILES_OR_DIRS','Array', 'files and directories to import (remote mode)' ) {|t| $cfg_dyn[:proj_list] += t.split(",").map{|e| e.strip}}
end


all.set_execution_block do |args|
     

        ##content="[#r>>]rnorm(10)"
        puts "args";p args
         
        content= (args=='__clipboard__') ? Clipboard.paste : args.join("\n")

        service,url,port = :local,"127.0.0.1",7777
           
        if service
            EventMachine.run {
              #portMin,portMax=5555,5559
              $cfg_dyn[:client_cmd_opts][:port]=port
              #EM::add_periodic_timer(1) {
              #EM::next_tick{
              ##DEBUG: p $cfg_dyn
                EventMachine.connect url, port, DyndocInteractiveClient, $cfg_dyn, content
              #}
              #}
            }
        else
            puts "[Client] Stop since service is not provided!"
        end

end
cmd.add_command( all )

cmd.parse args